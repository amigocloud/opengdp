#!/bin/bash
# Copyright (c) 2011, Brian Case
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

have_hdf="@HAVE_HDF@";

###############################################################################
## @brief function to find a file with a glob
##
## @param glob the glob to match (include path)
##
## @return 0 on success, 1 on failure
##
## @retval stdout   full path to the first matching file
##
###############################################################################

globfile () {
    local glob="$1"
    
    local result=0
    
    shopt -s nullglob dotglob
    local file=( $glob )
    if (( ${#file[@]} ))
    then
        echo "${file[0]}"
    else
        result=1
    fi
    
    shopt -u nullglob dotglob
    
    return $result
}

###############################################################################
## @brief callback function to make a complete list of all the msbands of the
##         subdatasets
##
## @return 0 for success
##
## @retval stdout list of all the msbands for the current subdataset
##
## @details
## global vars
## @param msbands*        array of band filename patterns
##
###############################################################################

listmsbands_cb () {
    
    local msb
    for msb in "${msbands[@]}"
    do
        echo "$msb"
    done
}

###############################################################################
## @brief function to make a complete list of all the msbands of the
##         subdatasets
##
## @return 0 for success
##
## @retval stdout list of all the msbands for all the subdatasets
##
## @details
## global vars
## @param msbands*        array of band filename patterns
##
###############################################################################

listmsbands () {
   
    subds_iterator "listmsbands_cb" | sort | uniq

}

###############################################################################
## @brief callback function to make a complete list of all the msbands of the
##         subdatasets
##
## @return 0 for success
##
## @retval stdout list of all the msbands for the current subdataset
##
## @details
## global vars
## @param msbands*        array of band filename patterns
##
###############################################################################

listmsmaskbands_cb () {
    
    local msb
    for msb in "${msmaskbands[@]}"
    do
        echo "$msb"
    done
}

###############################################################################
## @brief function to make a complete list of all the msbands of the
##         subdatasets
##
## @return 0 for success
##
## @retval stdout list of all the msbands for all the subdatasets
##
## @details
## global vars
## @param msbands*        array of band filename patterns
##
###############################################################################

listmsmaskbands () {
   
    subds_iterator "listmsmaskbands_cb" | sort | uniq

}

###############################################################################
## @brief function to figure out what bands to extract from an hdf
##
## @param hdffile       full path to the hdf file
## @param msbands       array of band filename patterns
##
## @return 0 for success
###############################################################################

getsdslist () {
    local hdffile="$1"
    local msbands=("${@:2}")
    
    local meta=$(dumpmeta "${hdffile}" /dev/stdout)
    
    ##### find the sds base names #####
    
    local bandbases=$(grep -e "OBJECT=DataField" -A4 <<<"$meta" |\
                       grep -e DataFieldName |\
                       sed 's/.*"\([^"]*\)".*/\1/'
                      )
    
    ##### loop over the product band list to build an array of bands for this dataset #####
    
    local ofiles=()
    local msband
    local sds=""
    
    ##### loop over the sds base names #####
    
    for bandbase in $bandbases
    do
        
        ##### loop over the msbands #####
        
        local bands=( )
        for msband in "${msbands[@]}"
        do
            
            ##### is the sds base name equal to the sds name? #####
            
            if [[  "$msband" == "${bandbase///}" ]]
            then
                break
            
            ##### is the sds base name in the msband name? #####
            
            elif [[ "$msband" == ${bandbase///}* ]]
            then
                local bnum=$(sed -e "s/${bandbase}_b//" <<<"$msband")
                bands[$bnum]=1
            fi
        done
        
        ##### is there any matching bands to do in this dataset? #####
        
        if [ -n "${!bands[*]}" ]
        then
        
            ##### build a comma delim list of bands #####
            
            local bandlist=""
            local indices=(${!bands[*]})
            local i=0
            for (( i = 0 ; i <= ${indices[@]:(-1)} ; i++ ))
            do
                bandlist="$bandlist,${bands[$i]}"
            done
            
            ##### add the basename and list to the sds list #####
            
            if [ -n "$sds" ]
            then
                sds="${sds}; ${bandbase}${bandlist}"
            else
                sds="${sds}${bandbase}${bandlist}"
            fi
        
        elif [[  "$msband" == "${bandbase///}" ]]
        then
            
            ##### add the basename and list to the sds list #####
            
            if [ -n "$sds" ]
            then
                sds="${sds}; ${bandbase}"
            else
                sds="${sds}${bandbase}"
            fi
        fi
    done
    
    echo "$sds"
}


###############################################################################
## @brief wrapper for swath2grid
##
## @param infile        full path to the hdf file to extract from
## @param outfile       full path output filename (template)
## @param geolocfile    full path to the geolocation file
## @param cx            center x coordanate
## @param cy            center y coordanate
## @param oul           upper left output coordanates "lx,uy"
## @param olr           lower right output coordanates "rx,ly"
## @param sds           sds to extract
##
## @return 0 for success, 1 for failure
##
## @details
## if sds is "" all sds's will be extracted
##
###############################################################################

swath2grid_wrap () {
    local infile="$1"
    local outfile="$2"
    local geolocfile="$3"
    local cx="$4"
    local cy="$5"
    local oul="$6"
    local olr="$7"
    local sds="$8"
            
    if [ -n "$sds" ]
    then
        swath2grid -if="${infile}" \
                   -of="${outfile}" \
                   -gf="${geolocfile}" \
                   -off=GEOTIFF_FMT \
                   -oproj=PS \
                   -oprm=0,0,0,0,${cx},${cy} \
                   -oul="${oul}" \
                   -olr="${olr}" \
                   -osp=8 \
                   -osst=LAT_LONG \
                   -sds="$sds" > /dev/null || { printerror ; return; }
                    
    else
        swath2grid -if="${infile}" \
                   -of="${outfile}" \
                   -gf="${geolocfile}" \
                   -off=GEOTIFF_FMT \
                   -oproj=PS \
                   -oprm=0,0,0,0,${cx},${cy} \
                   -oul="${oul}" \
                   -olr="${olr}" \
                   -osp=8 \
                   -osst=LAT_LONG > /dev/null || { printerror ; return; }
    
    fi

}

###############################################################################
## @brief wrapper for crefl
##
## @param tmpdir    dir the hdf files are in
## @param outfile   full path output filename (template)
##
## @return 0 for success, 1 for failure
##
## @details
## global vars
## @param creflfiles    array of 3 globs for the 1km, hkm, qkm files
## @param creflbands    comma sepperated list of bands
##
###############################################################################

crefl_wrap () {
    local tmpdir="$1"
    local outfile="$2"

    if [ -n "$creflbands" ]
    then
        crefl ${tmpdir}/${creflfiles[0]} \
              ${tmpdir}/${creflfiles[1]} \
              ${tmpdir}/${creflfiles[2]} \
              --bands="$creflbands" \
              --of="${outfile}" > /dev/null || { printerror ; return; }
    else
        
        crefl ${tmpdir}/${creflfiles[0]} \
              ${tmpdir}/${creflfiles[1]} \
              ${tmpdir}/${creflfiles[2]} \
              --of="${outfile}" > /dev/null || { printerror ; return; }
    fi
    
}

###############################################################################
## @brief function to calc the corners and center of the image from the hdf
##        metadata
##
## @param file      full path to the hdf file to read the metadata from
##
## @return 0 for success, 1 for failure
##
## @retval the corners and center
##           "ulx urx lrx llx uly ury lry lly cx cy"
##
###############################################################################

hdf_findcorners () {
    local file="$1"
    
    local meta=$(dumpmeta "${file}" /dev/stdout)
    
    ##### get the corners of the image #####

    read ulx urx lrx llx < <(grep " OBJECT.*GRINGPOINTLONGITUDE" -A4 <<<"$meta" |\
                              grep VALUE |\
                              sed -e 's/.*[(]\([-.0-9]*\), \([-.0-9]*\), \([-.0-9]*\), \([-.0-9]*\)[)].*/\1 \2 \3 \4/'
                             )


    read uly ury lry lly < <(grep " OBJECT.*GRINGPOINTLATITUDE" -A4 <<<"$meta" |\
                              grep VALUE |\
                              sed -e 's/.*[(]\([-.0-9]*\), \([-.0-9]*\), \([-.0-9]*\), \([-.0-9]*\)[)].*/\1 \2 \3 \4/'
                            )

    read bbe < <(grep " OBJECT.*EASTBOUNDINGCOORDINATE" -A4 <<<"$meta" |\
                   grep VALUE |\
                   sed -e 's/.* \([-.0-9]*\).*/\1/'
                 )
                 
    read bbn < <(grep " OBJECT.*NORTHBOUNDINGCOORDINATE" -A4 <<<"$meta" |\
                   grep VALUE |\
                   sed -e 's/.* \([-.0-9]*\).*/\1/'
                 )
    read bbs < <(grep " OBJECT.*SOUTHBOUNDINGCOORDINATE" -A4 <<<"$meta" |\
                   grep VALUE |\
                   sed -e 's/.* \([-.0-9]*\).*/\1/'
                 )
                 
    read bbw < <(grep " OBJECT.*WESTBOUNDINGCOORDINATE" -A4 <<<"$meta" |\
                   grep VALUE |\
                   sed -e 's/.* \([-.0-9]*\).*/\1/'
                 )

    ##### large change in lon from top to bottom then its over the pole #####

    if { fcmp "$llx - $ulx > 75" || fcmp "$ulx - $llx > 75" ; } && \
        { fcmp "$lrx - $urx > 75" || fcmp "$urx - $lrx > 75" ; }
    then
        #s
        if fcmp "$lly < 0"
        then
            llx=$(fcalc "$llx - 180")
            lrx=$(fcalc "$lrx - 180")
            local t=$llx
            llx=$lrx
            lrx=$t
            if fcmp "$llx < -180"
            then
                llx=$(fcalc "$llx + 360")
            fi
            if fcmp "$lrx < -180"
            then
                lrx=$(fcalc "$lrx + 360")
            fi

            lly=$(fcalc "-180 - $lly")
            lry=$(fcalc "-180 - $lry")
            
        #n
        else
            ulx=$(fcalc "$ulx - 180")
            urx=$(fcalc "$urx - 180")
            local t=$ulx
            ulx=$urx
            urx=$t
            if fcmp "$ulx < -180"
            then
                ulx=$(fcalc "$ulx + 360")
            fi
            if fcmp "$urx < -180"
            then
                urx=$(fcalc "$urx + 360")
            fi

            uly=$(fcalc "180 - $uly")
            ury=$(fcalc "180 - $ury")

        fi
    fi

    ##### count the left corners > 90 #####
    
    local lcount=0
    fcmp "$ulx > 90"
    ((lcount += !$?))
    fcmp "$llx > 90"
    ((lcount += !$?))
    
    ##### count the right corners < -90 #####
    
    local rcount=0
    fcmp "$urx < -90"
    ((rcount += !$?))
    fcmp "$lrx < -90"
    ((rcount += !$?))
    
    ##### if the image has left corners west of the dateline and right      #####
    ##### corners east of the dateline, then the image is over the dateline #####
    
    if ((lcount > 0 && rcount > 0))
    then
        if fcmp "$ulx > 0"
        then
            ulx=$(fcalc "$ulx - 360")
        fi

        if fcmp "$llx > 0"
        then
            llx=$(fcalc "$llx - 360")
        fi
        if fcmp "$urx > 0"
        then
            urx=$(fcalc "$urx - 360")
        fi

        if fcmp "$lrx > 0"
        then
            lrx=$(fcalc "$lrx - 360")
        fi
    fi
    
    ##### find the center of the image #####
    
    local cx=$(fcalc "($llx + $ulx + $urx + $lrx) / 4")
    local cy=$(fcalc "($lly + $uly + $ury + $lry) / 4")
    
    ##### correct for center x < 180 #####
    
    if fcmp "$cx < -180"
    then
        cx=$(fcalc "$cx + 360")
    fi

    ##### fix center of image if its on the other side of the pole #####

    if fcmp "$cy > 90"
    then
        cy=$(fcalc "180 - $cy")
        if fcmp "$cx < 0"
        then
            cx=$(fcalc "$cx + 180")
        else
            cx=$(fcalc "$cx - 180")
        fi
    fi

    if fcmp "$cy < -90"
    then
        cy=$(fcalc "-180 - $cy")
        if fcmp "$cx < 0"
        then
            cx=$(fcalc "$cx + 180")
        else
            cx=$(fcalc "$cx - 180")
        fi
    fi
    
    echo "$ulx $urx $lrx $llx $uly $ury $lry $lly $cx $cy"

}


###############################################################################
## @brief function to test an image for day or night
##
## @param file   full path to the hdf file to read the metadata from
##
## @return 0 for success, 1 for failure
##
## @retval stdout value of the DAYNIGHTFLAG metadata object
##
###############################################################################

hdf_get_daynight () {
    local file="$1"    
    
    dumpmeta "$file" /dev/stdout |\
     grep -e " OBJECT.*DAYNIGHTFLAG" -A4 |\
     grep "VALUE" |\
     sed 's/.*"\([^"]*\)".*/\1/'
     
}

###############################################################################
## @brief main function to handle a hdf
##
## @param lastfile   the main file
## @param tmpdir     temp dir to use for proccessing
## @param ts         timestamp of this file
## @param origdir    dir all files are assumed to be in
## @param files      array of the file and its asociated files
##
## @return 0 for success, 1 for failure
##
## @details
## global vars
## @param dayonly       dayonly flag proccess only daytime files
## @param creflfiles    array of 3 globs for the 1km, hkm, qkm files
##
###############################################################################

dohdf () {
    local lastfile="$1"
    local tmpdir="$2"
    local ts="$3"
    local origdir="$4"
    local files=("${@:5}")
    
    ##### make a complete list of all the msbands of the subdatasets #####
    
    allmsbands=( $(listmsbands) )
    allmsmaskbands=( $(listmsmaskbands) )
    
    ##### loop though the files and sep out the support files #####
    
    local dfiles=()
    local i=0
    local file
    for file in "${files[@]}"
    do
        ##### geolocation? #####
        
        if [[ "$file" == M[OY]D03.* ]]
        then
            local geoloc="$file"
        
        fi
        
        dfiles[i++]="$file"
        
    done
    
    ##### if there is no geoloc file bail #####

    if ! [ -n "$geoloc" ]
    then
        return
    fi

    ##### get a output prefix #####
    
    base="${lastfile#*.}"
    base="${base%.*}"
    base="${base%.*}"
    
    ##### check if its day or night #####
    
    local daynight=$( hdf_get_daynight "${tmpdir}/$geoloc" )
    if istrue "$dayonly" && { [[ "$daynight" != "Day" ]] && [[ "$daynight" != "Both" ]] ; }
    then
        return;
    fi
    
    ##### get the corners and center of the image #####
    
    local ulx urx lrx llx uly ury lry lly cx cy
    read ulx urx lrx llx uly ury lry lly cx cy < <(hdf_findcorners "${tmpdir}/$geoloc" )
    
    ##### get bbox #####
    
    local lx rx
    lx=$(fmin $llx $ulx)
    rx=$(fmax $lrx $urx)
    if fcmp "$lx < -180"
    then
        lx=$(fcalc "$lx + 360")
    fi

    local uy ly
    uy=$(fmax $uly $ury)
    ly=$(fmin $lly $lry)
    uy=$(fmin $uy 90)
    ly=$(fmax $ly -90)
    
    local oul=()
    local olr=()
    
    ##### need to split into 2 at the dateline? #####
    
    if ((lcount > 0 && rcount > 0))
    then
        oul[0]="${lx},${uy}"
        oul[1]="-180,${uy}"
        olr[0]="180,${ly}"
        olr[1]="${rx},${ly}"

    else
        oul[0]="${lx},${uy}"
        olr[0]="${rx},${ly}"

    fi

    ##### do we need to run crefl? #####
    
    if [ -n "$creflfiles" ]
    then
        crefl_wrap "$tmpdir" "${tmpdir}/crefl.${base}.hdf" || return
        
        ##### append the crefl hdf to the dfiles #####
        
        dfiles=( ${dfiles[@]} "crefl.${base}.hdf" )
    fi
    
    ##### loop over the bboxes #####
    
    local ibbox
    for (( ibbox = 0; ibbox < ${#oul[@]} ; ibbox++ ))
    do

        ##### make tiffs from the dfiles #####
            
        local dfile
        for dfile in "${dfiles[@]}"
        do
            unset sds
                        
            if [[ "$dfile" != "crefl.${base}.hdf" ]]
            then
                
                ##### get the list of sds's to extract freom this file #####
                
                local sds=$(getsdslist "${tmpdir}/$dfile" "${allmsbands[@]}" "${allmsmaskbands[@]}")
                
            fi
            
            ##### if it has any sds's to extract or #####
            ##### its the crefl file, extract       #####
                        
            if [ -n "$sds" ] || [[ "${dfile}" == "crefl.${base}.hdf" ]]
            then
                
                swath2grid_wrap "${tmpdir}/${dfile}" \
                                "${tmpdir}/${base}_${ibbox}.tif" \
                                "${tmpdir}/$geoloc" \
                                "${cx}" "${cy}" \
                                "${oul[$ibbox]}" \
                                "${olr[$ibbox]}" \
                                "$sds" || return
            fi
        done

        ##### make an aray of the msband files needed to build the product #####
        
        local ofile
        local ofiles=()
        
        for msb in "${allmsbands[@]}" "${allmsmaskbands[@]}"
        do
            ofile=$(globfile "${tmpdir}/${base}*${msb}*") \
             || { printerror "Can not find file "${tmpdir}/${base}*${msb}*"" ;
                  return;
                }
            ofiles=( "${ofiles[@]}" "${ofile##*/}" )
        done

        ##### translate the nodata values to 0 #####

        i=0
        
        local vfiles=()
        for ofile in "${ofiles[@]}"
        do
            obase="${ofile%.*}"
            
            local type=$(gdalinfo "${tmpdir}/${ofile}" | grep "Type=" | sed 's/.*Type=\(\w*\).*/\1/' | head -n 1)
            
            ##### FIXME we need to handle more data types ####
            ##### FIXME if we were to op any msmaskbands we could break things #####
            
            if [[ type == "Int16" ]]
            then
                local nodatav=-32768
                
                gdalwarp -srcnodata $nodatav -wo INIT_DEST=0 -of VRT \
                         "${tmpdir}/${ofile}" \
                         "${tmpdir}/${obase}.vrt" > /dev/null || { printerror ; return; }
                
                vfiles[i++]="${obase}.vrt"
                
            elif [[ type == "UInt16" ]]
            then
                local nodatav=65535
                gdalwarp -srcnodata $nodatav -wo INIT_DEST=0 -of VRT \
                         "${tmpdir}/${ofile}" \
                         "${tmpdir}/${obase}.vrt" > /dev/null || { printerror ; return; }
                
                vfiles[i++]="${obase}.vrt"
                
            else
                vfiles[i++]="${ofile}"
            fi
            
        done
        
        doimg_multiband "${base}_${ibbox}" "$tmpdir" "$ts" "no" "" "${vfiles[@]}"
        
    done
}

