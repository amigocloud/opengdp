#!/bin/bash
# Copyright (c) 2010, Brian Case
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

have_dialog="@HAVE_DIALOG@"
have_mc="@HAVE_MC@"

##### source the cached config if there is one #####

if ! [ -d ~/.dwh ]
then
    mkdir ~/.dwh
fi

if [ -f ~/.dwh/mkproject.cache ]
then
    source ~/.dwh/mkproject.cache
fi

##### set some default values #####

if ! [ -n "$c_path" ]
then
       c_path="/data"
fi

if ! [ -n "$c_tmpdir" ]
then
       c_tmpdir="/tmp"
fi

if ! [ -n "$c_mapserverpath" ]
then
       c_mapserverpath="/usr/local/src/mapserver/mapserver"
fi

if ! [ -n "$c_cgibindir" ]
then
       c_cgibindir="/var/www/cgi-bin"
fi

if ! [ -n "$c_htmldir" ]
then
       c_htmldir="/var/www/html"
fi

if ! [ -n "$c_urlbase" ]
then
       c_urlbase="http://$(hostname)"
fi

if ! [ -n "$c_urlcgibin_tc" ]
then
       c_urlcgibin_tc="http://$(hostname)/tilecache/tilecache.py"
fi

if ! [ -n "$c_mapcenter" ]
then
       c_mapcenter="0, 0"
fi

if ! [ -n "$c_mapzoom" ]
then
       c_mapzoom="10"
fi


##### input box function #####

function inputbox {
    
    if [ -n "$have_dialog" ]
    then
        echo $(dialog --clear --inputbox "$1" 12 80 "$2" 2>&1 >/dev/tty)
    else
        local myvar
        read -e -i "$2" -p "$1:" myvar
        echo $myvar
    fi
}

##### yes no box function #####

function yesnobox {
    
    if [ -n "$have_dialog" ]
    then
        dialog --clear --yesno "$1" 12 80  2>&1 >/dev/tty
        return $?
    else
        local myvar
        read -e -p "$1 : " myvar
        if [[ "$myvar" = "yes" ]]
        then
            return 0;
        else
            return 1;
        fi
    fi
    
}

##### name of project #####

unset fullproject

while ! [ -n "$fullproject" ]
do
    fullproject="$(inputbox "enter the full project name: " "$c_fullproject")"
done


##### name of project #####

unset project

while ! [ -n "$project" ]
do
    project="$(inputbox "enter the project name: " "$c_project")"
done

project=$(echo "$project" | sed -r 's/[ \t]+/_/g')

    
##### project creation path #####

error=""

while true
do
    unset path
    while ! [ -n "$path" ]
    do
        path="$(inputbox "${error}enter the path to create the project in : " "$c_path")"
    done

    if ! [ -d "$path" ]
    then
        error="ERROR: $path is not a dir\n"
        continue;
    fi
    
    if [ -e "${path}/${project}" ] && ! [ -d "${path}/${project}/" ]
    then
        error="ERROR: $path exists and is not a dir\n"
        continue;
    fi
    
    if [ -d "${path}/${project}/" ]
    then
        if yesnobox "WARNING: ${path}/${project} already exists use anyway? yes/no : "
        then
            break;
        fi
        continue;
    fi
    
    if ! [ -w "$path" ]
    then
        if yesnobox "WARNING ${path} is not writable use sudo? yes/no : "
        then
            uid=$(id -u)
            gid=$(id -g)
            reset
            if sudo bash -c "$(printf 'mkdir %q' "${path}/${project}") && $(printf 'chown %q %q' ${uid}:${gid} "${path}/${project}") "
            then
                break;
            fi
            error="mkdir failed\n"
        fi
        continue;
    fi
    
    if mkdir "${path}/${project}"
    then
        break
    fi
    
    error="mkdir failed\n"
    
done

##### mapfile #####

unset mapfile

while ! [ -n "$mapfile" ]
do
    mapfile=$(inputbox "enter the name of the mapfile: " "$project.map")
done

##### temp dir #####

error=""

while true
do
    unset tmpdir
    while ! [ -n "$tmpdir" ]
    do
        tmpdir=$(inputbox "${error}enter the path to the temp dir: " "$c_tmpdir")
    done
    
    if ! [ -d "$tmpdir" ]
    then
        error="ERROR: $tmpdir is not a dir\n"
        continue;
    fi
    
    if ! [ -w "$tmpdir" ]
    then
        error="ERROR: $tmpdir is not writeable\n"
        continue;
    fi

    break;
done

##### mapserver path #####

unset mapserverpath

while ! [ -n "$mapserverpath" ]
do
    mapserverpath=$(inputbox "enter the path to the mapserver binaries: " "$c_mapserverpath")
done

##### cgibin  dir #####

unset error
while true
do
    unset cgibindir
    while ! [ -n "$cgibindir" ]
    do
        cgibindir=$(inputbox "${error}enter the path to the cgi-bin dir: " "$c_cgibindir")
    done
    
        if ! [ -d "$cgibindir" ]
    then
        error="ERROR: $cgibindir is not a dir\n"
        continue;
    fi
    
    break
done

##### cgi bin script #####

while true
do
    unset cgibin
    while ! [ -n "$cgibin" ]
    do
        cgibin=$(inputbox "enter the name of the cgi-bin script: " "${project}")
    done
    
    if [ -e "$cgibindir/${cgibin}" ]
    then
        if yesnobox "WARNING: "$cgibindir/${cgibin}" already exists use anyway? yes/no : "
        then
            break;
        fi
        continue;
    fi
    
    if ! [ -w "$cgibindir" ]
    then
        if yesnobox "WARNING ${cgibindir} is not writable use sudo? yes/no : "
        then
            uid=$(id -u)
            gid=$(id -g)
            reset
            if sudo bash -c "$(printf 'touch %q' "$cgibindir/${cgibin}") && $(printf 'chown %q %q' ${uid}:${gid} "$cgibindir/${cgibin}") && $(printf 'chmod %q %q' "755" "$cgibindir/${cgibin}")"
            then
                break;
            fi
            error="touch failed\n"
        fi
        continue;
    fi
    
    if touch "$cgibindir/${cgibin}"
    then
        break
    fi
    
    error="touch failed\n"
done

##### html  dir #####

unset error

while true
do
    unset htmldir
    while ! [ -n "$htmldir" ]
    do
        htmldir=$(inputbox "${error}enter the path to the html dir to create the project in: " "$c_htmldir")
    done
    

    if ! [ -d "$htmldir" ]
    then
        error="ERROR: $htmldir is not a dir\n"
        continue;
    fi
    
    if [ -e "$htmldir/${project}" ] && ! [ -d "$htmldir/${project}/" ]
    then
        error="ERROR: $htmldir exists and is not a dir\n"
        continue;
    fi
    
    if [ -d "$htmldir/${project}/" ]
    then
        if yesnobox "WARNING: $htmldir/${project} already exists use anyway? yes/no : "
        then
            break;
        fi
        continue;
    fi
    
    if ! [ -w "$htmldir" ]
    then
        if yesnobox "WARNING $htmldir is not writable use sudo? yes/no : "
        then
            uid=$(id -u)
            gid=$(id -g)
            reset
            if sudo bash -c "$(printf 'mkdir %q' "$htmldir/${project}") && $(printf 'chown %q %q' ${uid}:${gid} "$htmldir/${project}")"
            then
                break;
            fi
            error="mkdir failed\n"
        fi
        continue;
    fi
    
    if mkdir "$htmldir/${project}"
    then
        break
    fi
    
    error="mkdir failed\n"
done


##### url base #####

unset urlbase

while ! [ -n "$urlbase" ]
do
    urlbase=$(inputbox "enter the base url for the web server: " "$c_urlbase")
done

##### tilecache url #####

unset urlcgibin_tc

while ! [ -n "$urlcgibin_tc" ]
do
    urlcgibin_tc=$(inputbox "enter the fill url for the tilecache: " "$c_urlcgibin_tc")
done

##### url cgi-bin dir #####

unset urlcgibindir

while ! [ -n "$urlcgibindir" ]
do
    urlcgibindir=$(inputbox "enter the cgi bin dir url: " "$urlbase/cgi-bin")
done

##### url html dir #####

unset urlhtmldir


while ! [ -n "$urlhtmldir" ]
do
    urlhtmldir=$(inputbox "enter the html dir url" "$urlbase/html/$project")
done

##### map center #####

unset mapcenter
unset error

while true
do
    unset mc
    while ! [ -n "$mc" ]
    do
        mc=$(inputbox "${error}enter the center coordinates of the map in lon, lat format: " "$c_mapcenter")
    done
    
    
    mapcenter="$mc"
    break
done

##### mapzoom #####

unset mapzoom

while ! [ -n "$mapzoom" ]
do
    mapzoom=$(inputbox "enter the default map zoom level: " "$c_mapzoom")
done
        
##### some compound vars #####

basedir="${path}/${project}"
scriptdir="${path}/${project}/scripts/"
mapfile="$basedir/$mapfile"
urlcgibin="$urlcgibindir/$cgibin"
htmlbase="$htmldir/$project"
IFS=", "
read maplon maplat <<<"$mapcenter"
unset IFS

((mapaltitude = 128000000))
for ((i = 0; i < mapzoom; i++))
do
    ((mapaltitude/=2))
done

##### print the stuff #####

myvars=$(
echo "------------------------------------------------------------------------"
echo "fullproject:      $fullproject"
echo "project:          $project"
echo "path:             $path"
echo "basedir:          $basedir"
echo "scriptdir:        $scriptdir"
echo "edcftp:           $edcftp"
echo "mapfile:          $mapfile"
echo "mapserverpath:    $mapserverpath"
echo "tmpdir:           $tmpdir"
echo "limit:            $limit"
echo "cgibindir:        $cgibindir"
echo "cgibin:           $cgibin"
echo "htmldir:          $htmldir"
echo "htmlbase:         $htmlbase"
echo "urlbase:          $urlbase"
echo "urlcgibindir:     $urlcgibindir"
echo "urlcgibin:        $urlcgibin"
echo "urlcgibin_tc:     $urlcgibin_tc"
echo "urlhtmldir:       $urlhtmldir"
echo "mapcenter:        $mapcenter"
echo "maplon:           $maplon"
echo "maplat:           $maplat"
echo "mapzoom:          $mapzoom"
echo "mapaltitude:      $mapaltitude"
echo "------------------------------------------------------------------------"
)

if [ -n "$have_dialog" ]
then
    dialog --clear --msgbox "$myvars" 30 100
else
    echo "$myvars"
fi


					 
##### fix the , in mapcenter #####

#mapcenter="$(echo $mapcenter | sed 's/,/\\,/')"

###############################################################################
# function to sub the vars in a file
###############################################################################

function do_subst {
    sed -e "s|[@]fullproject[@]|$fullproject|g" \
        -e "s|[@]project[@]|$project|g" \
        -e "s|[@]path[@]|$path|g" \
        -e "s|[@]basedir[@]|$basedir|g" \
        -e "s|[@]scriptdir[@]|$scriptdir|g" \
        -e "s|[@]mapfile[@]|$mapfile|g" \
        -e "s|[@]mapserverpath[@]|$mapserverpath|g" \
        -e "s|[@]tmp[@]|$tmpdir|g" \
        -e "s|[@]cgibindir[@]|$cgibindir|g" \
        -e "s|[@]cgibin[@]|$cgibin|g" \
        -e "s|[@]htmldir[@]|$htmldir|g" \
        -e "s|[@]htmlbase[@]|$htmlbase|g" \
        -e "s|[@]urlbase[@]|$urlbase|g" \
        -e "s|[@]urlcgibindir[@]|$urlcgibindir|g" \
        -e "s|[@]urlcgibin[@]|$urlcgibin|g" \
        -e "s|[@]urlcgibin_tc[@]|$urlcgibin_tc|g" \
        -e "s|[@]urlhtmldir[@]|$urlhtmldir|g" \
        -e "s|[@]mapcenter[@]|$mapcenter|g" \
        -e "s|[@]maplon[@]|$maplon|g" \
        -e "s|[@]maplat[@]|$maplat|g" \
        -e "s|[@]mapaltitude[@]|$mapaltitude|g" \
        -e "s|[@]mapzoom[@]|$mapzoom|g"
}


##### scripts #####

if [ ! -d "$scriptdir" ]
then
    mkdir "$scriptdir"
fi

do_subst < "@PKGDATADIR@/scripts/dwh-proj_def.bash" > "$scriptdir/dwh-proj_def.bash"


##### map #####

if [ -f  "$mapfile" ]
then
    ts=$(date +%s)
    
    mv  "$mapfile" "${mapfile}.${ts}.bak"
    
    do_subst < "@PKGDATADIR@/map/default.map" > "$mapfile"
    
    grep "${mapfile}.${ts}.bak" -e INCLUDE |\
     while read line
     do
        linenum=$(cat "$mapfile" |\
                   grep -n -e "^[ ]*END[ ]*$" |\
                   tail -n 1 |\
                   cut -d ":" -f 1
                 )

        ed -s "$mapfile" << EOF
${linenum}-1a
${line}
.
w
EOF
    done
    
else
    do_subst < "@PKGDATADIR@/map/default.map" > "$mapfile"
fi

##### cgi #####

do_subst < "@PKGDATADIR@/cgibin/default.cgi" >> "$cgibindir/${cgibin}"
chmod +x "$cgibindir/${cgibin}"

##### html #####

if [ -f  "$htmlbase/index.html" ]
then
    ts=$(date +%s)
    
    mv  "$htmlbase/index.html" "$htmlbase/index.html.${ts}.bak"
    
    do_subst < "@PKGDATADIR@/web/index.html" > "$htmlbase/index.html"

    grep "$htmlbase/index.html.${ts}.bak" -e '<script type="text/javascript" src=".*.js"></script>' |\
     while read line
     do
        if ! grep "@PKGDATADIR@/web/index.html" -e "$line"
        then
            linenum=$(cat "${htmlbase}/index.html" |\
                       grep -n -e "finish.js" |\
                       tail -n 1 |\
                       cut -d ":" -f 1
                     )

            ed -s "${htmlbase}/index.html" << EOF
${linenum}-1a
        <script type="text/javascript"
.
w
EOF
        fi
    done
else
    do_subst < "@PKGDATADIR@/web/index.html" > "$htmlbase/index.html"
fi

##### tilecache #####

if ! [ -f  "$htmlbase/tilecache.conf" ]
then
    do_subst < "@PKGDATADIR@/web/tilecache.conf" > "$htmlbase/tilecache.conf"
fi

##### kml #####

if ! [ -f  "$htmlbase/index.kml" ]
then
    do_subst < "@PKGDATADIR@/web/index.kml" > "$htmlbase/index.kml"
fi

##### js #####

for f in @PKGDATADIR@/web/*.js
do
    ff="${f##*/}"
    do_subst < "$f" > "$htmlbase/$ff"
done

###### write the cache #####

cat > ~/.dwh/mkproject.cache << EOF
c_path="$path"
c_tmpdir="$tmpdir"
c_mapserverpath="$mapserverpath"
c_cgibindir="$cgibindir"
c_htmldir="$htmldir"
c_urlbase="$urlbase"
c_urlcgibin_tc="$urlcgibin_tc"
c_mapcenter="$mapcenter"
c_mapzoom="$mapzoom"
EOF

if [ -n "$have_mc" ]
then
    if yesnobox "Do you wish to use mc to copy any of the example scripts to your project? : "
    then
        mc -u "@PKGDATADIR@/examples" "$scriptdir"
    fi
else
    echo "there are example scripts in @PKGDATADIR@/examples you can copy to $scriptdir"
fi
